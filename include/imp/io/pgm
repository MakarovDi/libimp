#ifndef    IMP_TEST_PGM_HEADER
#   define IMP_TEST_PGM_HEADER


#include <cstdint>
#include <string>
#include <limits>

#include <cctype>

#include <ex/meta/math_type>
#include <ex/encoding/word16>
#include <ex/range_check>
#include <ex/stream/file>
#include <ex/stream/buffered>

#include "imp/common/matrix"
#include "imp/internal/stream_tools"


namespace imp
{
namespace pgm
{



template <typename Image, typename T = typename Image::Scalar>
static void save(ex::IOutputStream& binary_stream,
                 const IDenseObject<Image>& image,
                 T white_level = std::numeric_limits<T>::max(),
                 T black_level = T(0))
{
    static_assert(ex::math_type<T>::classify != ex::math_type<T>::kUserType, "type is not supported");

    index_t storage_size = 16;

    switch (ex::math_type<T>::classify)
    {
        case ex::math_type<T>::kIntergral:
            if (white_level > 65535)
                throw std::logic_error("white level too high for PPM: 16-bit max");

            if (white_level <= 255)
                storage_size = 8;
            break;

        case ex::math_type<T>::kFloating:
            break;
    }

    const uint16_t pgm_max = uint16_t((1u << storage_size) - 1u);

    // header
    binary_stream << "P5\n";
    binary_stream << std::to_string(image.cols()) << " " << std::to_string(image.rows()) << "\n";
    binary_stream << std::to_string(pgm_max) << "\n";

    T range = white_level - black_level;

    // content
    for (index_t y = 0; y < image.rows() ; ++y)
        for (index_t x = 0; x < image.cols(); ++x)
        {
            ex::range_check(image(y, x), black_level, white_level);

            ex::word16 v = uint16_t( std::round(pgm_max * float(image(y, x) - black_level) / range) );

            if (storage_size == 16) binary_stream.write_byte(v.hi);
            binary_stream.write_byte(v.low);
        }
}


template <typename Image, typename T = typename Image::Scalar>
static void save(const char* file_name,
                 const IDenseObject<Image>& image,
                 T white_level = std::numeric_limits<T>::max(),
                 T black_level = T(0))
{
    ex::FileStream fs(file_name, ex::FileStream::kCreate, ex::FileStream::kWrite);
    ex::OutputBufferedStream<ex::FileStream> bfs(fs);

    pgm::save(bfs, image, white_level, black_level);
};


template <typename T>
static Matrix<T> load(ex::IInputStream& binary_stream,
                                      T white_level = std::numeric_limits<T>::max(),
                                      T black_level = T(0))
{
    uint16_t signature = binary_stream.read<uint16_t>();

    if (signature != 0x3550) // P5 signature
        throw std::runtime_error("file is not PGM (no P5 signature)");

    index_t  width     = internal::parse_integer<index_t>(binary_stream);
    index_t  height    = internal::parse_integer<index_t>(binary_stream);
    uint16_t pgm_range = internal::parse_integer<uint16_t>(binary_stream);

    if (width < 0 || height < 0 || (pgm_range != 255 && pgm_range != 65535))
        throw std::runtime_error("wrong file format");

    Matrix<T> image(height, width);

    bool is_8bit_file = (pgm_range <= 255);
    T    output_range = white_level - black_level;

    for (index_t i = 0; i < image.size(); ++i)
    {
        ex::word16 r_word = internal::read_word(binary_stream, is_8bit_file);

        float v = float(r_word) / pgm_range;

        image(i) = T(std::round(output_range * v)) + black_level;
    }

    return image;
}


template <typename T>
static Matrix<T> load(const char* file_name,
                                T white_level = std::numeric_limits<T>::max(),
                                T black_level = T(0))
{
    ex::FileStream fs(file_name, ex::FileStream::kOpenExisting, ex::FileStream::kRead);
    ex::InputBufferedStream<ex::FileStream> bfs(fs);

    return pgm::load<T>(bfs, white_level, black_level);
}


}
}
#endif // IMP_TEST_PGM_HEADER
