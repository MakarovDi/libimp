#ifndef    IMP_COMMON_RGB_IMAGE_HEADER
#   define IMP_COMMON_RGB_IMAGE_HEADER


#include <ex/common/type>
#include <ex/common/policy>

#include "imp/image/image"


namespace imp
{


template <typename T>
struct RgbAlias
{
    using Image = Image<T, RgbAlias>;
public:
    enum ColorPlane : index_t
    {
        kR = 0,
        kG = 1,
        kB = 2,
        kCount,
    };


    inline const T& r(index_t index)        const { return m_r_plane[index]; }
    inline       T& r(index_t index)              { return m_r_plane[index]; }
    inline const T& r(index_t x, index_t y) const { return m_r_plane(x, y);  }
    inline       T& r(index_t x, index_t y)       { return m_r_plane(x, y);  }

    inline const T& g(index_t index)        const { return m_g_plane[index]; }
    inline       T& g(index_t index)              { return m_g_plane[index]; }
    inline const T& g(index_t x, index_t y) const { return m_g_plane(x, y);  }
    inline       T& g(index_t x, index_t y)       { return m_g_plane(x, y);  }

    inline const T& b(index_t index)        const { return m_b_plane[index]; }
    inline       T& b(index_t index)              { return m_b_plane[index]; }
    inline const T& b(index_t x, index_t y) const { return m_b_plane(x, y);  }
    inline       T& b(index_t x, index_t y)       { return m_b_plane(x, y);  }

    const Matrix<T>& r_plane() const { return m_r_plane; }
          Matrix<T>  r_plane()       { return Matrix<T>(m_r_plane.cols(), m_r_plane.rows(), m_r_plane.ptr(), RawMemory::kReuse); }

    const Matrix<T>& g_plane() const { return m_g_plane; }
          Matrix<T>  g_plane()       { return Matrix<T>(m_g_plane.cols(), m_g_plane.rows(), m_g_plane.ptr(), RawMemory::kReuse); }

    const Matrix<T>& b_plane() const { return m_b_plane; }
          Matrix<T>  b_plane()       { return Matrix<T>(m_b_plane.cols(), m_b_plane.rows(), m_b_plane.ptr(), RawMemory::kReuse); }


    RgbAlias(RgbAlias&&) noexcept = default;
    RgbAlias& operator=(RgbAlias&&) noexcept = default;

protected:
    RgbAlias()  { }
    ~RgbAlias() { } // non-virtual destructor

protected:
    void init_alias(Image& img)
    {
        m_r_plane = Matrix<T>(img.width(), img.height(), img.ptr(),                      RawMemory::kReuse);
        m_g_plane = Matrix<T>(img.width(), img.height(), img.ptr() + img.plane_size(),   RawMemory::kReuse);
        m_b_plane = Matrix<T>(img.width(), img.height(), img.ptr() + 2*img.plane_size(), RawMemory::kReuse);
    }

private:
    Matrix<T> m_r_plane;
    Matrix<T> m_g_plane;
    Matrix<T> m_b_plane;
};


template <typename T>
using RgbImage = Image<T, RgbAlias<T>>;


}
#endif
