#ifndef    IMP_COMMON_RGB_IMAGE_HEADER
#   define IMP_COMMON_RGB_IMAGE_HEADER


#include <ex/common/type>
#include <ex/common/policy>

#include "imp/image/image"


namespace imp
{


template <typename T>
struct RgbFacade
{
    using Image = Image<T, RgbFacade>;
public:
    enum ColorPlane : index_t
    {
        kR = 0,
        kG = 1,
        kB = 2,
        kCount,
    };

public:
    const T& r(index_t index)        const { return self().color(index, kR); }
          T& r(index_t index)              { return self().color(index, kR); }
    const T& r(index_t x, index_t y) const { return self().color(x, y,  kR); }
          T& r(index_t x, index_t y)       { return self().color(x, y,  kR); }

    const T& g(index_t index)        const { return self().color(index, kG); }
          T& g(index_t index)              { return self().color(index, kG); }
    const T& g(index_t x, index_t y) const { return self().color(x, y,  kG); }
          T& g(index_t x, index_t y)       { return self().color(x, y,  kG); }

    const T& b(index_t index)        const { return self().color(index, kB); }
          T& b(index_t index)              { return self().color(index, kB); }
    const T& b(index_t x, index_t y) const { return self().color(x, y,  kB); }
          T& b(index_t x, index_t y)       { return self().color(x, y,  kB); }

    const Map<Matrix<T>>& r_plane()  const { return self().plane(kR); }
          Map<Matrix<T>>& r_plane()        { return self().plane(kR); }

    const Map<Matrix<T>>& g_plane()  const { return self().plane(kG); }
          Map<Matrix<T>>& g_plane()        { return self().plane(kG); }

    const Map<Matrix<T>>& b_plane()  const { return self().plane(kB); }
          Map<Matrix<T>>& b_plane()        { return self().plane(kB); }

protected:
    RgbFacade()  { }
    ~RgbFacade() { } // non-virtual destructor

private:
    const Image& self() const { return *static_cast<const Image*>(this); }
    Image&       self()       { return *static_cast<Image*>(this);       }
};


template <typename T>
using RgbImage = Image<T, RgbFacade<T>>;


}
#endif
