#ifndef    IMP_IMAGE_OPERATOR_HEADER
#   define IMP_IMAGE_OPERATOR_HEADER


#include "imp/image/image"
#include "imp/common/matrix"


namespace imp
{


template <typename T, typename Alias>
Matrix<T> min(const Image<T, Alias>& image)
{
    return image.min();
}


template <typename T, typename Alias>
Matrix<T> max(const Image<T, Alias>& image)
{
    return image.max();
}


template <typename T>
Matrix<T> clamp(const Matrix<T>& matrix, const T& max_value)
{
    Matrix<T> clamped(matrix.rows(), matrix.cols());

    clamped.array() = (matrix.array() > max_value).select(max_value, matrix.array());

    return clamped;
}


template <typename T, typename Alias>
Image<T, Alias> clamp(const Image<T, Alias>& image, const T& max_value)
{
    Image<T, Alias> clamped(image.height(), image.width());

    clamped.array() = (image.array() > max_value).select(max_value, image.array());

    return clamped;
}


template <typename T>
Matrix<T> clip(const Matrix<T>& matrix, const T& min_value, const T& max_value)
{
    Matrix<T> clipped(matrix.rows(), matrix.cols());

    clipped.array() = (matrix.array() > max_value).select(max_value,
                      (matrix.array() < min_value).select(min_value, matrix.array()));

    return clipped;
}


template <typename T, typename Alias>
Image<T, Alias> clip(const Image<T, Alias>& image, const T& min_value, const T& max_value)
{
    Image<T, Alias> clipped(image.height(), image.width());

    clipped.array() = (image.array() > max_value).select(max_value,
                      (image.array() < min_value).select(min_value, image.array()));

    return clipped;
}




}
#endif // IMP_IMAGE_OPERATOR_HEADER