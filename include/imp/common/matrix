#ifndef    IMP_COMMON_MATRIX_HEADER
#   define IMP_COMMON_MATRIX_HEADER

#include <memory>
#include <iomanip>
#include <cstring>
#include <cmath>
#include <random>

#include <ex/range_check>
#include <ex/common/type>
#include <ex/common/policy>
#include <ex/policy/notice>
#include <ex/meta/selector>
#include <ex/meta/math_type>
#include <ex/random>


#define EIGEN_MATRIX_PLUGIN "internal/matrix_plugin.hpp"

#ifndef _MSC_VER
#   pragma GCC diagnostic push
#   pragma GCC diagnostic ignored "-Wattributes"
#   include <Eigen/Core>
#   pragma GCC diagnostic pop
#else
#   include <Eigen/Core>
#endif


namespace imp
{


template
<
    typename T,
    int Rows = Eigen::Dynamic,
    int Cols = Eigen::Dynamic,
    int MaxRows = Rows,
    int MaxCols = Cols,
    int Options = Eigen::RowMajor
>
using Matrix = Eigen::Matrix<T, Rows, Cols, Options, MaxRows, MaxCols>;


template
<
    typename T,
    int Rows = Eigen::Dynamic,
    int MaxRows = Rows
>
using Vector = Matrix<T, Rows, 1, MaxRows, 1, Eigen::ColMajor>;


template
<
    typename T,
    int Cols = Eigen::Dynamic,
    int MaxCols = Cols
>
using RowVector = Matrix<T, 1, Cols, 1, MaxCols, Eigen::RowMajor>;


template
<
    typename PlainObjectType,
    int MapOptions = Eigen::Unaligned,
    typename StrideType = Eigen::Stride<0,0>
>
using Map = Eigen::Map<PlainObjectType, MapOptions, StrideType>;


}

#endif // IMP_COMMON_MATRIX_HEADER
