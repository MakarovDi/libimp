#ifndef    IMP_COMMON_MATRIX_HEADER
#   define IMP_COMMON_MATRIX_HEADER

#include <memory>
#include <iomanip>
#include <cstring>
#include <ex/common/type>
#include <ex/policy/index_check>


namespace imp
{


enum MatrixMem
{
    kCopy = 0,
    kReuse,
};


template
<
    typename T,
    class index_tCheckPolicy = ex::policy::IndexCheckAssert<index_t>
>
class Matrix
{
    enum Config
    {
        kMemShrinkageScale = 4,
        kPrintedItemWidth  = 4,
    };

public:


public:
    virtual ~Matrix() = default;


    Matrix(index_t cols, index_t rows) :
        m_rows(rows),
        m_cols(cols),
        m_size(rows*cols),
        m_mem_size(m_size * sizeof(T)),
        m_data(new T[m_size]),
        m_ptr(m_data.get())
    {
    }


    Matrix(index_t cols, index_t rows, const T* ptr, MatrixMem mem_mode) :
        m_rows(rows),
        m_cols(cols),
        m_size(rows*cols),
        m_mem_size(m_size * sizeof(T)),
        m_data( mem_mode == MatrixMem::kCopy ? new T[m_size] : nullptr),
        m_ptr ( mem_mode == MatrixMem::kCopy ? m_data.get()  : const_cast<T*>(ptr) )
    {
        if (mem_mode == MatrixMem::kCopy)
        {
            std::memcpy(m_ptr, ptr, size_t(m_mem_size));
        }
    }


    template <index_t N>
    Matrix(index_t cols, index_t rows, const T (&ptr)[N], MatrixMem mem_mode) :
        m_rows(rows),
        m_cols(cols),
        m_size(rows*cols),
        m_mem_size(m_size * sizeof(T)),
        m_data( mem_mode == MatrixMem::kCopy ? new T[m_size] : nullptr),
        m_ptr ( mem_mode == MatrixMem::kCopy ? m_data.get()  : const_cast<T*>(ptr) )
    {
        if (m_size > N)
            throw std::logic_error("size mismatch");

        if (mem_mode == MatrixMem::kCopy)
        {
            std::memcpy(m_ptr, ptr, size_t(m_mem_size));
        }
    }


    Matrix(index_t cols, index_t rows, const std::unique_ptr<T[]>& ptr) :
        Matrix(cols, rows, ptr.get(), MatrixMem::kCopy)
    {
    }


    Matrix(index_t cols, index_t rows, std::unique_ptr<T[]>&& ptr) :
        m_rows(rows),
        m_cols(cols),
        m_size(rows*cols),
        m_mem_size(m_size * sizeof(T)),
        m_data(std::move(ptr)),
        m_ptr(m_data.get())
    {
    }


    Matrix(const Matrix& m) :
        Matrix(m.cols(), m.rows(), const_cast<T*>(m.ptr()), MatrixMem::kCopy)
    {
    }


    Matrix(Matrix&& m) noexcept : Matrix(m.cols(), m.rows(), std::move(m.m_data))
    {
        m.m_ptr  = nullptr;
        m.m_rows = m.m_cols = 0;
        m.m_size = m.m_mem_size = 0;
    }

public:
    Matrix& operator=(const Matrix& m)
    {
        if (this == &m) return *this;

        if (m_mem_size < m.mem_size() || m_mem_size > m.mem_size()*kMemShrinkageScale)
        {
            m_data.reset(new T[m.mem_size()]);
            m_ptr = m_data.get();
            m_mem_size = m.mem_size();
        }

        m_rows = m.rows();
        m_cols = m.cols();
        m_size = m.size();

        std::memcpy(m_ptr, m.ptr(), m.size()* sizeof(T));

        return *this;
    }


    Matrix& operator=(Matrix&& m) noexcept
    {
        if (this == &m) return *this;

        m_rows = m.rows();
        m_cols = m.cols();
        m_size = m.size();

        m_data = std::move(m.m_data);
        m_mem_size = m.mem_size();

        m_ptr = m.m_ptr;

        m.m_ptr  = nullptr;
        m.m_rows = m.m_cols = 0;
        m.m_size = m.m_mem_size = 0;

        return *this;
    }


    Matrix& operator+=(const Matrix& m)
    {
        if (m.rows() != rows() || m.cols() != cols())
            throw std::logic_error("matrix dimension mismatch");

        for (index_t i = 0; i < m.size(); ++i)
            m_ptr[i] += m.item(i);

        return *this;
    }


    Matrix& operator-=(const Matrix& m)
    {
        if (m.rows() != rows() || m.cols() != cols())
            throw std::logic_error("matrix dimension mismatch");

        for (index_t i = 0; i < m.size(); ++i)
            m_ptr[i] -= m.item(i);

        return *this;
    }

public:
    index_t rows() const { return m_rows; }
    index_t cols() const { return m_cols; }
    index_t size() const { return m_size; }

    index_t mem_size()    const { return m_mem_size;              }
    bool  is_own_memory() const { return m_data.get() != nullptr; }

    const T* ptr() const { return m_ptr; }
    T*       ptr()       { return m_ptr; }


    inline const T& item(index_t i) const
    {
        index_tCheckPolicy::check(i, size()-1);

        return m_ptr[i];
    }


    inline T& item(index_t i)
    {
        index_tCheckPolicy::check(i, size()-1);

        return m_ptr[i];
    }


    inline const T& item(index_t x, index_t y) const
    {
        index_tCheckPolicy::check(x, cols()-1);
        index_tCheckPolicy::check(y, rows()-1);

        return m_ptr[y*cols() + x];
    }


    inline const T& operator()(index_t i) const { return item(i); }
    inline       T& operator()(index_t i)       { return item(i); }

    inline const T& operator[](index_t i) const { return item(i); }
    inline       T& operator[](index_t i)       { return item(i); }

    inline const T& operator()(index_t x, index_t y) const { return item(x, y); }
    inline       T& operator()(index_t x, index_t y)       { return item(x, y); }


    inline T& item(index_t x, index_t y)
    {
        index_tCheckPolicy::check(x, cols()-1);
        index_tCheckPolicy::check(y, rows()-1);

        return m_ptr[y*cols() + x];
    }


    template <typename C>
    void print(std::basic_ostream<C>& stream) const
    {
        for (index_t y = 0; y < rows(); ++y)
        {
            for (index_t x = 0; x < cols(); ++x)
                stream << std::setw(kPrintedItemWidth) << item(x, y) << " ";

            stream << std::endl;
        }
    }

private:
    index_t m_rows;
    index_t m_cols;

    index_t m_size;
    index_t m_mem_size;

    std::unique_ptr<T[]> m_data;

    T* m_ptr;
};


}
#endif // IMP_COMMON_MATRIX_HEADER
