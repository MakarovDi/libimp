#ifndef    IMP_COMMON_MATRIX_HEADER
#   define IMP_COMMON_MATRIX_HEADER

#include <ex/common/type>

#define EIGEN_DEFAULT_DENSE_INDEX_TYPE index_t

#define EIGEN_MATRIX_PLUGIN     "imp/internal/eigen/matrix_plugin"
#define EIGEN_MATRIXBASE_PLUGIN "imp/internal/eigen/matrixbase_plugin"


#ifndef _MSC_VER
#   pragma GCC diagnostic push
#   pragma GCC diagnostic ignored "-Wattributes"
#   include <Eigen/Core>
#   pragma GCC diagnostic pop
#else
#   include <Eigen/Core>
#endif


namespace imp
{


template
<
    typename T,
    int Rows = Eigen::Dynamic,
    int Cols = Eigen::Dynamic,
    int MaxRows = Rows,
    int MaxCols = Cols
>
using Matrix = Eigen::Matrix<T, Rows, Cols, Eigen::RowMajor, MaxRows, MaxCols>;



template
<
    typename T,
    int Rows = Eigen::Dynamic,
    int Cols = Eigen::Dynamic,
    int MaxRows = Rows,
    int MaxCols = Cols
>
using Array = Eigen::Array<T, Rows, Cols, Eigen::RowMajor, MaxRows, MaxCols>;



template
<
    typename T,
    int Rows = Eigen::Dynamic,
    int MaxRows = Rows
>
using Vector = Eigen::Matrix<T, Rows, 1, Eigen::ColMajor, MaxRows, 1>;



template
<
    typename T,
    int Cols = Eigen::Dynamic,
    int MaxCols = Cols
>
using RowVector = Eigen::Matrix<T, 1, Cols, Eigen::RowMajor, 1, MaxCols>;


template
<
    typename T,
    int Cols = Eigen::Dynamic,
    int MaxCols = Cols
>
using RowArray = Eigen::Array<T, 1, Cols, Eigen::RowMajor, 1, MaxCols>;


template
<
    typename PlainObjectType,
    int MapOptions = Eigen::Unaligned,
    typename StrideType = Eigen::Stride<0,0>
>
using Map = Eigen::Map<PlainObjectType, MapOptions, StrideType>;


//
// IMatrix: any Matrix, Vector, Expression(m1+m2)
//     \---> contains matrix operations: prod/dot, norm, LU-/QR-decompositions
//
template <typename M>
using IMatrix = Eigen::MatrixBase<M>;


//
// IArray: any Array and array expressions(a1+a2)
//     \---> contains element-wise operatios: +, *, cos, abs, ...
//
template <typename A>
using IArray = Eigen::ArrayBase<A>;


//
// IDenseObject: any IMatrix or IArray objects
//     \---> contains base methods: indexing, resize, comparison, fillers (Zero/Random/Ones/...)
//
template <typename D>
using IDenseObject = Eigen::DenseBase<D>;


}

#endif // IMP_COMMON_MATRIX_HEADER
