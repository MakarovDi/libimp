#ifndef    IMP_COMMON_MATRIX_OPERATOR_HEADER
#   define IMP_COMMON_MATRIX_OPERATOR_HEADER


#include <ostream>

#include "imp/common/matrix"


template <typename C, typename T>
std::basic_ostream<C>& operator<<(std::basic_ostream<C>& stream, const Matrix<T>& m)
{
    m.print(stream);
    return stream;
}


template <typename T, typename BinaryOperation>
Matrix<T> binary_matrix_operation(const Matrix<T>& m1, const Matrix<T>& m2, BinaryOperation operation)
{
    if (m1.cols() != m2.cols() || m1.rows() != m2.rows())
        throw std::logic_error("matrix dimension mismatch");

    Matrix<T> m(m1.cols(), m1.rows());

    for (index_t i = 0; i < m1.size(); ++i)
        m.item(i) = operation(m1.item(i), m2.item(i));

    return m;
}


template <typename T>
Matrix<T> operator+(const Matrix<T>& m1, const Matrix<T>& m2)
{
    return binary_matrix_operation(m1, m2, [](T a,T b){ return a + b; } );
}


template <typename T>
Matrix<T> operator-(const Matrix<T>& m1, const Matrix<T>& m2)
{
    return binary_matrix_operation(m1, m2, [](T a,T b){return  a - b;} );
}


#endif
